// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU1 {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	Mux16(b=instruction,a=foutM,sel=instruction[15],out=o1);

    //Mux4Way16(a=instruction,b=instruction,c=false,d=foutM,sel[0]=instruction[15],sel[1]=instruction[5],out=o1);
    
    Not(in=instruction[15],out=nout);
    Or(a=nout,b=instruction[5],out=aload);
   
	ARegister(in=o1,load=aload,out=o2,out[0..14]=addressM);
	Mux16(a=o2,b=inM,sel=instruction[12],out=o3);

    And(a=instruction[15],b=instruction[4],out=dload);
	DRegister(in=foutM,load=dload,out=o4);

    Mux4Way16(a[0]=instruction[0],a[1..15]=false,b[0]=instruction[1],a[1..15]=false,c[0]=instruction[2],a[1..15]=false,d=false,sel[0]=zr,sel[1]=ng,out[0]=pcload0);  
    And(a=pcload0,b=instruction[15],out=pcload);  
	PC(in=o2,reset=reset,load=pcload,inc=true,out[0..14]=pc);

	ALU(out=outM,out=foutM,x=o4,y=o3,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],zr=zr,ng=ng);
	And(a=instruction[15],b=instruction[3],out=writeM);
}
