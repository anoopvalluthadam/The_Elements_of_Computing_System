/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and
 * execute instructions written in the machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM=0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time unit. If reset=1 then the
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU2 {

    IN inM[16], // M value input (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset; // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16], // M value output
        writeM, // Write into M?
        addressM[15], // Address in data memory (of M)
        pc[15]; // address of next instruction

    PARTS:
    
    // Instruction looks like this:
    // A Instr: 0 v v v v v v v v v v v v v v v
    // C Instr: 1 1 1 a c c c c c c d d d j j j
    
    // Figure out if this is a Address instruction or a Compute Instruction.
    // This is signified by the MSB- on = Compute, off = Address
    Or(a=instruction[15], b=false, out=isAddrInstrT);
    Not(in=isAddrInstrT,out=isAddrInstr);
    
    // If this is a compute instruction and the destination is A, let's set a
    // flag. The destination is A when the D1 bit is on
    And(a=instruction[5], b=true, out=isARegDest);
    
    // Now, OR isAddrInstr and isARegDest together to determine if we need to
    // set something in the A Register
    Or(a=isAddrInstr, b=isARegDest, out=setAReg);
    
    // Lastly, we need to figure out what to set in the A Reg
    Mux16(a=true,b=instruction,sel=isAddrInstr,out=ARegSet);
    
    // Set A Register. Load bit is only set if it's a legal load
    ARegister(in=ARegSet,load=setAReg,out=ARegOut);
    
    //DRegister(in=,load=,out=dreg);
    
    // Connect to the ALU
    /**ALU(x=dreg,
    y=,
    zx,
    nx,
    zy,
    ny,
    f,
    no,
    out,
    zr,
    ng
    );
    
    // Increment the program counter
    // Missing the logic to support jumps
    PC(in=false,inc=true,load=false,reset=reset,out=pc);
**/
}

